@model List<WebMVC.Models.ProductDetailViewModel>

@{
    ViewData["Title"] = "Bảng Sản phẩm";
    Layout = "~/Views/Shared/_LayoutStaff.cshtml";
    var selectedName = ViewBag.SelectedName as string ?? "";
    var selectedBrandId = (int?)ViewBag.SelectedBrandId ?? 0;
}

<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2 align-items-center">
            <div class="col-sm-6">
                <h1>Danh sách sản phẩm</h1>
            </div>
            <div class="col-sm-6 text-right">
                <button class="btn btn-success" style="background-color: #28a745; color: white;" onclick="openAddProductModal()">
                    <i class="fas fa-plus"></i> Add Product
                </button>
            </div>
        </div>
    </div>
</section>

<section class="content">
    <div class="box">
        <div class="box-header with-border">
            <form method="get" action="/Products/Search" class="form-inline mb-3">
                <div class="form-group mr-2">
                    <input type="text" name="name" value="@selectedName" placeholder="Product Name..." class="form-control" />
                </div>
                <div class="form-group mr-2">
                    <select name="brandId" class="form-control">
                        @foreach (var item in ViewBag.Brands as List<SelectListItem>)
                            {
                                var isSelected = item.Value == selectedBrandId.ToString() ? "selected" : "";
                                @:<option value="@item.Value" @isSelected>@item.Text</option>
                            }
                    </select>
                </div>
                <button type="submit" class="btn btn-primary">Search</button>
            </form>
        </div>
        <div class="box-body table-responsive">
            <table class="table table-bordered table-striped">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Name</th>
                        <th>Description</th>
                        <th>Main image</th>
                        <th>Brand</th>
                        <th>Status</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model != null && Model.Any())
                    {
                        foreach (var item in Model)
                        {
                            <tr>
                                <td>@item.Id</td>
                                <td>@item.Name</td>
                                <td>@item.Description</td>
                                <td>
                                    @if (!string.IsNullOrEmpty(item.MainImage))
                                    {
                                        <img src="@item.MainImage" alt="Ảnh sản phẩm" width="80" height="80" />
                                    }
                                    else
                                    {
                                        <span>Không có ảnh</span>
                                    }
                                </td>
                                <td>@item.BrandName</td>
                                <td>
                                    @if (item.IsDeleted)
                                    {
                                        <span class="label label-danger">remove</span>
                                    }
                                    else
                                    {
                                        <span class="label label-success">active</span>
                                    }
                                </td>
                                <td>
                                    <div style="display: flex; justify-content: center; gap: 6px;">
                                        <a href="@Url.Action("Details", "Products", new { id = item.Id })" class="btn btn-info btn-sm" style="background-color: #4285F4; color: white;">Variants</a>
                                        <a href="javascript:void(0);"
                                           class="btn btn-warning btn-sm"
                                           data-id="@item.Id"
                                           data-name="@item.Name"
                                           data-description="@item.Description"
                                           data-brandname="@item.BrandName"
                                           data-mainimage="@item.MainImage"
                                           onclick="prepareEditModal(this)">
                                           Edit
                                        </a>

                                        @if (item.IsDeleted)
                                        {
                                            <button class="btn btn-success btn-sm" onclick="restoreProduct(@item.Id)">
                                                    Restore
                                            </button>
                                        }
                                        else
                                        {
                                            <button class="btn btn-danger btn-sm" onclick="deleteProduct(@item.Id)">
                                                    Delete
                                            </button>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="7" class="text-center text-danger font-weight-bold">No suitable product.</td>
                        </tr>
                    }
                </tbody>
            </table>
            <div class="text-center">
    <ul class="pagination">
        @{
            int currentPage = ViewBag.CurrentPage;
            int totalPages = ViewBag.TotalPages;
            bool isSearch = ViewBag.IsSearch ?? false;

            // Tính trang Prev & Next
            int prevPage = currentPage > 1 ? currentPage - 1 : 1;
            int nextPage = currentPage < totalPages ? currentPage + 1 : totalPages;

            string prevUrl = isSearch
                ? Url.Action("Search", "Products", new { name = selectedName, brandId = selectedBrandId, page = prevPage })
                : Url.Action("Index", "Products", new { page = prevPage });

            string nextUrl = isSearch
                ? Url.Action("Search", "Products", new { name = selectedName, brandId = selectedBrandId, page = nextPage })
                : Url.Action("Index", "Products", new { page = nextPage });
        }

        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
            <a class="page-link" href="@(currentPage == 1 ? "#" : prevUrl)">Prev</a>
        </li>

        @for (int i = 1; i <= totalPages; i++)
        {
            var active = (i == currentPage) ? "active" : "";
            string url = isSearch
                ? Url.Action("Search", "Products", new { name = selectedName, brandId = selectedBrandId, page = i })
                : Url.Action("Index", "Products", new { page = i });

            <li class="page-item @active">
                <a class="page-link" href="@url">@i</a>
            </li>
        }

        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
            <a class="page-link" href="@(currentPage == totalPages ? "#" : nextUrl)">Next</a>
        </li>
    </ul>
</div>

        </div>
    </div>
</section>

<!-- Modal Thêm / Chỉnh sửa Sản phẩm -->
<div class="modal fade" id="productModal" tabindex="-1" role="dialog" aria-labelledby="productModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">

      <!-- HEADER -->
      <div class="modal-header d-flex justify-content-between align-items-center">
        <h5 class="modal-title font-weight-bold mb-0" id="productModalTitle" style="font-size: 20px;"></h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close" onclick="resetProductForm()">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>

      <!-- FORM -->
      <form id="productForm" onsubmit="submitProductForm(event)">
        <div class="modal-body">
          <input type="hidden" name="Id" /> <!-- Id: null hoặc >0 -->

          <div class="form-group">
            <label>Product Name</label>
            <input type="text" name="Name" class="form-control" required />
          </div>

          <div class="form-group">
            <label>Description</label>
            <textarea name="Description" class="form-control" required></textarea>
          </div>

          <div class="form-group">
            <label>Brand</label>
            <select name="BrandName" class="form-control" required>
              <option value="" disabled>Select Brand</option>
              @foreach (var item in ViewBag.Brands as List<SelectListItem>)
              {
                  if (item.Value != "0")
                  {
                      <option value="@item.Text">@item.Text</option>
                  }
              }
            </select>
          </div>

          <div class="form-group">
            <label>Main Image URL</label>
            <input type="text" name="MainImage" class="form-control" />
          </div>
        </div>

        <!-- FOOTER -->
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal" onclick="resetProductForm()">Close</button>
          <button type="submit" class="btn btn-primary" id="productModalSubmitBtn"></button>
        </div>
      </form>

    </div>
  </div>
</div>

<!-- Logic Thêm / Chỉnh sửa Sản Phẩm -->
<script>
    let isEditMode = false; // true: edit, false: add

function openAddProductModal() {
    isEditMode = false;
    document.getElementById("productModalTitle").textContent = "Add New Product";
    document.getElementById("productModalSubmitBtn").textContent = "Save Product";
    resetProductForm();
    $('#productModal').modal('show');
}

function prepareEditModal(button) {
    isEditMode = true;
    document.getElementById("productModalTitle").textContent = "Edit Product";
    document.getElementById("productModalSubmitBtn").textContent = "Update Product";

    const form = document.getElementById("productForm");
    form.elements["Id"].value = button.getAttribute("data-id");
    form.elements["Name"].value = button.getAttribute("data-name");
    form.elements["Description"].value = button.getAttribute("data-description");
    form.elements["BrandName"].value = button.getAttribute("data-brandname");
    form.elements["MainImage"].value = button.getAttribute("data-mainimage");

    $('#productModal').modal('show');
}

function resetProductForm() {
    const form = document.getElementById("productForm");
    if (form) {
        form.reset();
        form.elements["Id"].value = ""; // clear Id
        // set combo box về option đầu tiên (value="")
        form.elements["BrandName"].value = "";
    }
}

$('#productModal').on('hidden.bs.modal', function () {
    resetProductForm();
    isEditMode = false; // reset về add mode
});

async function submitProductForm(event) {
    event.preventDefault();

    const form = document.getElementById("productForm");
    const formData = new FormData(form);

    const data = {
        Id: formData.get("Id") ? parseInt(formData.get("Id")) : 0,
        Name: formData.get("Name").trim(),
        Description: formData.get("Description").trim(),
        BrandName: formData.get("BrandName"),
        MainImage: formData.get("MainImage").trim()
    };

    if (!data.Name || !data.Description || !data.BrandName) {
        alert("Please fill in all required fields.");
        return;
    }

    try {
        let url = "";
        let method = "";

        if (isEditMode && data.Id > 0) {
            url = `/Products/Update/${data.Id}`;
            method = "PUT";
        } else {
            url = `/Products/Create`;
            method = "POST";
        }

        const response = await fetch(url, {
            method: method,
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(data)
        });

        if (response.ok) {
            $('#productModal').modal('hide');
            resetProductForm();
            alert(isEditMode ? "Product updated successfully." : "Product added successfully.");
            location.reload();
        } else {
            const err = await response.text();
            if (err.includes("trùng tên")) {
                alert("Tên Product đã tồn tại. Hãy nhập tên khác");
            } else {
                alert("Failed: " + err);
            }
        }
    } catch (error) {
        alert("Error: " + error);
    }
}
</script>

<!-- Logic Xóa Sản Phẩm -->
<script>
        async function deleteProduct(id) {
        if (!confirm("Bạn có chắc chắn muốn xóa sản phẩm này?")) return;

        try {
            const response = await fetch(`/Products/Delete/${id}`, {
                method: "DELETE"
            });

            if (response.ok) {
                alert("Xóa sản phẩm thành công.");
                location.reload();
            } else {
                const error = await response.text();
                if (error.includes("đã được đặt")) {
                    alert(error); // Nội dung thông báo đã có sẵn từ Web API
                } else {
                    alert("Xóa sản phẩm thất bại: " + error);
                }
            }
        } catch (err) {
            alert("Đã xảy ra lỗi: " + err);
        }
    }
</script>


<!-- Logic Khôi phục Sản Phẩm -->
<script>
    async function restoreProduct(id) {
        if (!confirm("Bạn có chắc chắn muốn khôi phục sản phẩm này?")) return;

        try {
            const response = await fetch(`/Products/Restore/${id}`, {
                method: "PUT"
            });

            if (response.ok) {
                alert("Khôi phục sản phẩm thành công.");
                location.reload();
            } else {
                const error = await response.text();
                alert("Khôi phục sản phẩm thất bại: " + error);
            }
        } catch (err) {
            alert("Đã xảy ra lỗi: " + err);
        }
    }
</script>
