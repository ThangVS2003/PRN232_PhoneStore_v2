@model WebMVC.Models.ProductDetailViewModel

@{
    ViewData["Title"] = Model?.Name ?? "Product Details";
}

<!-- Start Banner Area -->
<section class="banner-area organic-breadcrumb">
    <div class="container">
        <div class="breadcrumb-banner d-flex flex-wrap align-items-center justify-content-end">
            <div class="col-first">
                <h1>Product Details</h1>
                <nav class="d-flex align-items-center">
                    <a href="@Url.Action("Index", "Home")">Home<span class="lnr lnr-arrow-right"></span></a>
                    <a href="@Url.Action("Index", "Product")">Shop<span class="lnr lnr-arrow-right"></span></a>
                    <a href="#">Product Details</a>
                </nav>
            </div>
        </div>
    </div>
</section>
<!-- End Banner Area -->
<!-- Start Product Details Area -->
<section class="product-details-area mt-50">
    <div class="container">
        @if (Model != null)
        {
            <div class="row">
                <!-- Product Image -->
                <div class="col-lg-6 col-md-6">
                    <div class="product-main-img">
                        <img class="img-fluid" src="@(string.IsNullOrEmpty(Model.MainImage) ? Url.Content("~/Content/img/product/p1.jpg") : Model.MainImage)" alt="@Model.Name" id="main-product-image">
                    </div>
                </div>
                <!-- Product Details -->
                <div class="col-lg-6 col-md-6">
                    <div class="product-details-content">
                        <h2>@Model.Name</h2>
                        <div class="product-price">
                            @{
                                var firstValidVariant = Model.Variants?.FirstOrDefault(v => v.SellingPrice > 0 && v.StockQuantity > 0);
                                var defaultColor = firstValidVariant?.Color ?? "N/A";
                                var defaultVersion = firstValidVariant?.Version ?? "N/A";
                                var defaultVariant = Model.Variants?.FirstOrDefault(v => v.Color == defaultColor && v.Version == defaultVersion && v.SellingPrice > 0 && v.StockQuantity > 0);
                                var defaultSellingPrice = defaultVariant?.SellingPrice ?? 0;
                                var maxQuantity = defaultVariant != null && defaultVariant.StockQuantity > 0 ? defaultVariant.StockQuantity - 1 : 0;
                            }
                        </div>
                        <p>@Model.Description</p>
                        <div class="product-variants">
                            <h4>Available Variants</h4>
                            <form action="@Url.Action("AddToCart", "Cart")" method="post" id="add-to-cart-form">
                                <input type="hidden" name="id" value="@Model.Id" />
                                <input type="hidden" name="variantId" id="variantId" value="" />
                                <!-- Color Selection -->
                                <div class="variant-section mb-3">
                                    <h5>Color</h5>
                                    <div class="variant-boxes d-flex flex-wrap">
                                        @{
                                            var allColors = Model.Variants?.Select(v => v.Color ?? "N/A").Distinct().ToList() ?? new List<string>();
                                            var firstValidColor = firstValidVariant?.Color ?? allColors.FirstOrDefault();
                                            foreach (var color in allColors)
                                            {
                                                <div class="variant-box color-box @(color == firstValidColor ? "selected" : "")"
                                                     data-color="@color"
                                                     style="margin-right: 10px; margin-bottom: 10px;">
                                                    @color
                                                </div>
                                            }
                                        }
                                    </div>
                                </div>
                                <!-- Version Selection -->
                                <div class="variant-section mb-3">
                                    <h5>Version</h5>
                                    <div class="variant-boxes d-flex flex-wrap">
                                        @{
                                            var allVersions = Model.Variants?.Select(v => v.Version ?? "N/A").Distinct().ToList() ?? new List<string>();
                                            var firstValidVersion = firstValidVariant?.Version ?? allVersions.FirstOrDefault();
                                            foreach (var version in allVersions)
                                            {
                                                <div class="variant-box version-box @(version == firstValidVersion ? "selected" : "")"
                                                     data-version="@version"
                                                     style="margin-right: 10px; margin-bottom: 10px;">
                                                    @version
                                                </div>
                                            }
                                        }
                                    </div>
                                </div>
                                <!-- Variant Info Display -->
                                <div class="variant-info mt-2">
                                    <p class="variant-info-text"><strong>Selected Variant:</strong> <span id="selected-variant">Color: @firstValidColor, Version: @firstValidVersion</span></p>
                                    <p class="variant-info-text">
                                        <strong>Price:</strong>
                                        <span class="price-selling" id="variant-price">@defaultSellingPrice.ToString("#,##0") ₫</span>
                                    </p>
                                    <p class="variant-info-text"><strong>Stock:</strong> <span id="variant-stock">@(defaultVariant?.StockQuantity ?? 0)</span></p>
                                    <div class="quantity-section mb-3">
                                        <h5>Quantity</h5>
                                        <input type="number" name="quantity" id="quantity-input" min="1" max="@maxQuantity" value="1" class="quantity-input" />
                                    </div>
                                </div>
                                <div class="product-actions mt-3">
                                    <button type="submit" class="primary-btn">Add to Cart</button>
                                    <a href="@Url.Action("AddToWishlist", "Wishlist", new { id = Model.Id })" class="social-info"></a>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Feedback Section -->
            <div class="row mt-5">
                <div class="col-12">
                    <h4>Feedback</h4>
                    @if (Model.Feedbacks != null && Model.Feedbacks.Any())
                    {
                        <div class="feedback-list">
                            @foreach (var feedback in Model.Feedbacks)
                            {
                                <div class="feedback-item mb-4 p-3 border rounded">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h5>@(string.IsNullOrEmpty(feedback.UserName) ? "Anonymous" : feedback.UserName)</h5>
                                        <div class="rating">
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                if (i <= feedback.Rating)
                                                {
                                                    <span class="fa fa-star text-warning"></span>
                                                }
                                                else
                                                {
                                                    <span class="fa fa-star text-muted"></span>
                                                }
                                            }
                                        </div>
                                    </div>
                                    <p class="mb-1">@(string.IsNullOrEmpty(feedback.Comment) ? "No comment provided." : feedback.Comment)</p>
                                    <small class="text-muted">@(feedback.CreatedAt?.ToString("MMM dd, yyyy HH:mm") ?? "N/A")</small>
                                </div>
                            }
                        </div>
                    }
                    else
                    {
                        <p>No feedback available for this product.</p>
                    }
                </div>
            </div>
        }
        else
        {
            <div class="row">
                <div class="col-12">
                    <p>Product not found.</p>
                </div>
            </div>
        }
    </div>
</section>
<!-- End Product Details Area -->
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        if (typeof jQuery !== 'undefined') {
            jQuery(document).ready(function () {
                console.log('jQuery loaded, initializing variant selection and add-to-cart.');

                // Hàm định dạng tiền tệ VND
                function formatVND(amount) {
                    return amount.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' });
                }

                // Variant data from Model
                var variants = @Html.Raw(Json.Serialize(Model?.Variants?.Select(v => new
            {
                id = v.Id,
                color = v.Color ?? "N/A",
                version = v.Version ?? "N/A",
                sellingPrice = v.SellingPrice,
                stockQuantity = v.StockQuantity,
                image = v.Image
            }) ?? Enumerable.Empty<object>()));

                console.log('Variants:', variants);

                // Update available versions based on selected color
                function updateVersions() {
                    var selectedColor = jQuery('.color-box.selected').data('color');
                    console.log('Selected Color:', selectedColor);
                    var allVersions = variants.map(v => v.version).filter((v, i, a) => a.indexOf(v) === i); // Unique versions
                    var validVersions = variants
                        .filter(v => v.color === selectedColor && v.sellingPrice > 0 && v.stockQuantity > 0)
                        .map(v => v.version);

                    jQuery('.version-box').each(function () {
                        var version = jQuery(this).data('version');
                        if (validVersions.includes(version)) {
                            jQuery(this).removeClass('disabled');
                            console.log('Enabled version:', version);
                        } else {
                            jQuery(this).addClass('disabled');
                            console.log('Disabled version:', version);
                            if (jQuery(this).hasClass('selected')) {
                                jQuery(this).removeClass('selected');
                                var firstValid = jQuery('.version-box:not(.disabled)').first();
                                if (firstValid.length) {
                                    firstValid.addClass('selected');
                                    console.log('Selected first valid version:', firstValid.data('version'));
                                }
                            }
                        }
                    });

                    updateVariant();
                    updateImage();
                }

                // Update available colors based on selected version
                function updateColors() {
                    var selectedVersion = jQuery('.version-box.selected').data('version');
                    console.log('Selected Version:', selectedVersion);
                    var allColors = variants.map(v => v.color).filter((v, i, a) => a.indexOf(v) === i); // Unique colors
                    var validColors = variants
                        .filter(v => v.version === selectedVersion && v.sellingPrice > 0 && v.stockQuantity > 0)
                        .map(v => v.color);

                    jQuery('.color-box').each(function () {
                        var color = jQuery(this).data('color');
                        if (validColors.includes(color)) {
                            jQuery(this).removeClass('disabled');
                            console.log('Enabled color:', color);
                        } else {
                            jQuery(this).addClass('disabled');
                            console.log('Disabled color:', color);
                            if (jQuery(this).hasClass('selected')) {
                                jQuery(this).removeClass('selected');
                                var firstValid = jQuery('.color-box:not(.disabled)').first();
                                if (firstValid.length) {
                                    firstValid.addClass('selected');
                                    console.log('Selected first valid color:', firstValid.data('color'));
                                }
                            }
                        }
                    });

                    updateVariant();
                    updateImage();
                }

                // Handle color box click
                jQuery('.color-box').click(function () {
                    if (jQuery(this).hasClass('disabled')) {
                        console.log('Clicked disabled color box, ignoring.');
                        return;
                    }
                    console.log('Clicked color box:', jQuery(this).data('color'));
                    jQuery('.color-box').removeClass('selected');
                    jQuery(this).addClass('selected');
                    updateVersions();
                });

                // Handle version box click
                jQuery('.version-box').click(function () {
                    if (jQuery(this).hasClass('disabled')) {
                        console.log('Clicked disabled version box, ignoring.');
                        return;
                    }
                    console.log('Clicked version box:', jQuery(this).data('version'));
                    jQuery('.version-box').removeClass('selected');
                    jQuery(this).addClass('selected');
                    updateColors();
                });

                // Update variant selection
                function updateVariant() {
                    var selectedColor = jQuery('.color-box.selected').data('color');
                    var selectedVersion = jQuery('.version-box.selected').data('version');
                    console.log('Updating variant - Color:', selectedColor, 'Version:', selectedVersion);

                    var variant = variants.find(v => v.color === selectedColor && v.version === selectedVersion && v.sellingPrice > 0 && v.stockQuantity > 0);
                    if (variant) {
                        jQuery('#variantId').val(variant.id);
                        jQuery('#selected-variant').text('Color: ' + selectedColor + ', Version: ' + selectedVersion);
                        jQuery('#variant-price').text(formatVND(variant.sellingPrice));
                        jQuery('#variant-stock').text(variant.stockQuantity);
                        jQuery('#quantity-input').attr('max', variant.stockQuantity > 0 ? variant.stockQuantity - 1 : 0);
                        jQuery('#quantity-input').val(1); // Reset quantity to 1 when variant changes
                        jQuery('#add-to-cart-form button').prop('disabled', false);
                        console.log('Valid variant selected:', variant);
                    } else {
                        jQuery('#variantId').val('');
                        jQuery('#selected-variant').text('Invalid combination');
                        jQuery('#variant-price').text(formatVND(0));
                        jQuery('#variant-stock').text('0');
                        jQuery('#quantity-input').attr('max', 0);
                        jQuery('#quantity-input').val(1);
                        jQuery('#add-to-cart-form button').prop('disabled', true);
                        console.log('Invalid variant combination');
                    }
                }

                // Update main image based on selected color
                function updateImage() {
                    var selectedColor = jQuery('.color-box.selected').data('color');
                    var variantWithImage = variants.find(v => v.color === selectedColor && v.sellingPrice > 0 && v.stockQuantity > 0);
                    var newImage = variantWithImage ? variantWithImage.image : '@(Model?.MainImage ?? Url.Content("~/Content/img/product/p1.jpg"))';
                    jQuery('#main-product-image').attr('src', newImage);
                    console.log('Updated image to:', newImage);
                }

                // Handle quantity input validation
                jQuery('#quantity-input').on('input change', function () {
                    var max = parseInt(jQuery(this).attr('max')) || 0;
                    var val = parseInt(jQuery(this).val()) || 1;
                    if (val < 1) {
                        jQuery(this).val(1);
                    } else if (val > max) {
                        jQuery(this).val(max);
                    }
                    console.log('Quantity updated:', jQuery(this).val());
                });

                // Handle add to cart
                jQuery('#add-to-cart-form').submit(function (e) {
                    e.preventDefault();
                    var form = jQuery(this);
                    var variantId = jQuery('#variantId').val();
                    var quantity = parseInt(jQuery('#quantity-input').val());

                    if (!variantId || quantity < 1) {
                        Swal.fire({
                            icon: 'error',
                            title: 'Lỗi!',
                            text: 'Vui lòng chọn một biến thể hợp lệ và số lượng lớn hơn 0.',
                            timer: 2000,
                            showConfirmButton: false
                        });
                        return;
                    }

                    jQuery.ajax({
                        url: form.attr('action'),
                        type: 'POST',
                        data: form.serialize(),
                        success: function (response) {
                            if (response.success) {
                                jQuery('#cart-count').text(response.cartCount);
                                Swal.fire({
                                    icon: 'success',
                                    title: 'Thành công!',
                                    text: 'Sản phẩm đã được thêm vào giỏ hàng.',
                                    timer: 2000,
                                    showConfirmButton: false
                                });
                                jQuery(document).trigger('cartUpdated');
                            } else {
                                if (response.redirectToLogin) {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Lỗi!',
                                        text: response.message || 'Vui lòng đăng nhập để thêm sản phẩm vào giỏ hàng.',
                                        timer: 2000,
                                        showConfirmButton: false
                                    }).then(() => {
                                        window.location.href = '@Url.Action("Login", "Account")';
                                    });
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Lỗi!',
                                        text: response.message || 'Không thể thêm sản phẩm vào giỏ hàng.',
                                        timer: 2000,
                                        showConfirmButton: false
                                    });
                                }
                            }
                        },
                        error: function (xhr) {
                            console.error('Add to cart error:', xhr.responseText);
                            Swal.fire({
                                icon: 'error',
                                title: 'Lỗi!',
                                text: xhr.responseJSON?.message || 'Đã xảy ra lỗi khi thêm sản phẩm vào giỏ hàng.',
                                timer: 2000,
                                showConfirmButton: false
                            });
                        }
                    });
                });

                // Initialize with first valid combination
                var firstValidVariant = variants.find(v => v.sellingPrice > 0 && v.stockQuantity > 0);
                if (firstValidVariant) {
                    jQuery('.color-box[data-color="' + firstValidVariant.color + '"]').addClass('selected');
                    jQuery('.version-box[data-version="' + firstValidVariant.version + '"]').addClass('selected');
                    console.log('Initialized with variant:', firstValidVariant);
                } else {
                    console.log('No valid variants found.');
                }

                updateVersions();
                updateColors();
                updateImage();
                updateVariant();

                // Image gallery switching
                jQuery('.product-gallery img').click(function () {
                    var src = jQuery(this).attr('src');
                    jQuery('#main-product-image').attr('src', src);
                    console.log('Gallery image switched to:', src);
                });
            });
        } else {
            console.warn('jQuery is not loaded. Image gallery, variant selection, and add-to-cart functionality are disabled.');
        }
    </script>
    <style>
        .variant-box {
            border: 2px solid #ccc;
            padding: 12px 18px;
            border-radius: 8px;
            transition: all 0.3s ease;
            background-color: #fff;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
            font-weight: 500;
            font-size: 1rem;
        }

        .product-main-img img {
            transition: all 0.3s ease-in-out;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
        }

        .variant-box:not(.disabled) {
            cursor: pointer;
        }

            .variant-box:not(.disabled):hover {
                border-color: #ffba00;
                background-color: #fff9e6;
            }

        .variant-box.selected:not(.disabled) {
            border-color: #ffa500;
            background-color: #fff3cd;
            color: #000;
        }

        .variant-box.disabled {
            opacity: 0.5;
            cursor: not-allowed;
            background-color: #f0f0f0;
            color: #999;
        }

        .variant-section h5 {
            margin-bottom: 12px;
            font-weight: 600;
            color: #333;
        }

        .variant-info p {
            margin-bottom: 6px;
            color: #444;
        }

        .variant-info-text {
            font-size: 1.1em;
            margin: 8px 0;
        }

        .price-selling {
            font-size: 2em;
            color: #e74c3c;
            font-weight: bold;
        }

        .product-price {
            display: flex;
            align-items: baseline;
            margin-bottom: 15px;
        }

        .feedback-item {
            background-color: #fafafa;
            border-left: 4px solid #ffba00;
            padding: 15px;
            border-radius: 8px;
            transition: background 0.3s;
        }

            .feedback-item:hover {
                background-color: #fffbe6;
            }

        .rating .fa-star {
            font-size: 1.2em;
            margin-left: 2px;
        }

        .quantity-section {
            margin-top: 10px;
        }

        .quantity-input {
            width: 90px;
            padding: 8px;
            border: 1px solid #ccc;
            border-radius: 6px;
            font-size: 1.1em;
        }

        .primary-btn {
            background-color: #ffba00;
            color: #fff;
            padding: 12px 24px;
            border: none;
            border-radius: 6px;
            font-size: 1.1em;
            transition: background-color 0.3s ease;
        }

            .primary-btn:hover {
                background-color: #e6a800;
                color: #fff;
            }

        .product-actions {
            display: flex;
            gap: 15px;
            align-items: center;
        }
    </style>
}